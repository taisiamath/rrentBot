import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import (
    ReplyKeyboardBuilder,
    KeyboardButton,
    InlineKeyboardBuilder,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = "7757068839:AAHlYJl3cDpG9HOiqRiLJRgjvdMyouYxDt4"
MANAGER_CHAT_ID = 1097537387
OWNER_CHAT_ID = 1097537387  # ID –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()


# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üì∑ –§–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã"),
        KeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã"),
        KeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"),
        KeyboardButton(text="üñ• –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"),
        KeyboardButton(text="‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"),
        KeyboardButton(text="üí¨ –ß–∞—Ç —Å –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º"),
    )
    builder.adjust(2, 2, 2)
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=False)


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò –ß–ê–¢–ê ==========
@dp.message(lambda message: message.text == "üí¨ –ß–∞—Ç —Å –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º")
async def start_owner_chat(message: types.Message):
    try:
        client_builder = InlineKeyboardBuilder()
        client_builder.add(
            types.InlineKeyboardButton(
                text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—é", url=f"tg://user?id={OWNER_CHAT_ID}"
            )
        )
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º:",
            reply_markup=client_builder.as_markup(),
        )

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞)
        admin_builder = InlineKeyboardBuilder()
        admin_builder.add(
            types.InlineKeyboardButton(
                text=f"üë§ –ö–ª–∏–µ–Ω—Ç {message.from_user.full_name}",
                url=f"tg://user?id={message.from_user.id}",
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=f"üîî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º",
            reply_markup=admin_builder.as_markup(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —á–∞—Ç–∞: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(),
        )


# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
class BookingStates(StatesGroup):
    name = State()
    dates = State()
    adults = State()
    children = State()
    pets = State()


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∞—Ä–µ–Ω–¥—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
    )


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ==========
@dp.message(lambda message: message.text == "üì∑ –§–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã")
async def show_photos(message: types.Message):
    try:
        # –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
        photo_paths = [
            "photos/photo1.jpg",
            "photos/photo2.jpg",
            "photos/photo3.jpg",
            "photos/photo4.jpg",
            "photos/photo5.jpg",
            "photos/photo6.jpg",
            "photos/photo7.jpg",
            "photos/photo8.jpg",
            "photos/photo9.jpg",
            "photos/photo10.jpg",
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        with open(photo_paths[0], "rb") as photo:
            await message.answer_photo(
                photo,
                caption="üè† –§–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã (1/10)",
                reply_markup=get_main_keyboard(),
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ
        for path in photo_paths[1:]:
            with open(path, "rb") as photo:
                await message.answer_photo(photo)

    except FileNotFoundError as e:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        await message.answer("‚ö†Ô∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@dp.message(lambda message: message.text == "üìù –û–ø–∏—Å–∞–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã")
async def show_description(message: types.Message):
    description = """
    üè¢ –ï–≤—Ä–æ–¥–≤—É—à–∫–∞ –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ –≤ –Ω–æ–≤–æ–º –∂–∫ –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å–∞ –ö–≤–∞—Ç—Ä–æ:
    ‚Ä¢ –ü–ª–æ—â–∞–¥—å: 36 –º¬≤
    ‚Ä¢ –°–ø–∞–ª—å–Ω—è: –¥–≤—É—Å–ø–∞–ª—å–Ω–∞—è –∫—Ä–æ–≤–∞—Ç—å, –∫—Ä–µ—Å–ª–æ-–∫—Ä–æ–≤–∞—Ç—å, —Ç–µ–ª–µ–≤–∏–∑–æ—Ä, –º–µ—Å—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è, —Å—Ç–æ–ª
    ‚Ä¢ –ì–æ—Å—Ç–∏–Ω–Ω–∞—è: –¥–≤—É—Å–ø–∞–ª—å–Ω—ã–π –¥–∏–≤–∞–Ω, –æ–±–µ–¥–µ–Ω–Ω—ã–π —Å—Ç–æ–ª
    ‚Ä¢ –ö—É—Ö–Ω—è: –∫—É—Ö–æ–Ω–Ω—ã–π –≥–∞—Ä–Ω–∏—Ç—É—Ä, —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, –ø–æ—Å—É–¥–æ–º–æ–µ—á–Ω–∞—è –º–∞—à–∏–Ω–∞, —á–∞–π–Ω–∏–∫, –¥—É—Ö–æ–≤–∫–∞, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞
    ‚Ä¢ –£–¥–æ–±—Å—Ç–≤–∞: Wi-Fi, –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä, —Å—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∫–∞ —Å —Å—É—à–∫–æ–π, —É—Ç—é–≥ –∏ –≥–ª–∞–¥–∏–ª—å–Ω–∞—è –¥–æ—Å–∫–∞, —Ñ–µ–Ω, –º–∞—Ç—Ä–∞—Å (–¥–ª—è –º–æ—Ä—è), smart TV, –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –ø–æ—Å—É–¥–∞, –≤ —Ç–æ–º —á–∏—Å–ª–µ –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏

    <b>–í—Å—ë –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ ‚Äî –≤ —à–∞–≥–æ–≤–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:</b>

‚Ä¢ –°–µ—Ç–µ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã, –∞–ø—Ç–µ–∫–∞, –ø–µ–∫–∞—Ä–Ω—è
‚Ä¢ –ë–æ–ª—å–Ω–∏—Ü–∞ –∏ –∞–≤—Ç–æ–±—É—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ‚Äî —Ä—è–¥–æ–º
‚Ä¢ 15 –º–∏–Ω—É—Ç –Ω–µ—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–∏ ‚Äî –∏ –≤—ã –Ω–∞ <b>–ø–ª—è–∂–µ</b> –∏–ª–∏ –∂/–¥ —Å—Ç–∞–Ω—Ü–∏–∏ "–î–∞–≥–æ–º—ã—Å"!

üöÜ "–õ–∞—Å—Ç–æ—á–∫–∞":
‚Ä¢ –î–æ —Ü–µ–Ω—Ç—Ä–∞ –°–æ—á–∏ ‚Äî 10 –º–∏–Ω—É—Ç
‚Ä¢ –í –ª—é–±—É—é —Ç–æ—á–∫—É –ø–æ–±–µ—Ä–µ–∂—å—è ‚Äî –±—ã—Å—Ç—Ä–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ

üöó –£–¥–æ–±—Å—Ç–≤–æ –¥–ª—è –≥–æ—Å—Ç–µ–π:
‚Ä¢ –ó–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∫–∞—Ä—à–µ—Ä–∏–Ω–≥–∞ ‚Äî –∞—Ä–µ–Ω–¥—É–π—Ç–µ –∞–≤—Ç–æ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º!

üåø –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º:
‚Ä¢ –î–∞–≥–æ–º—ã—Å—Å–∫–∏–µ –∫–æ—Ä—ã—Ç–∞ ‚Äî –æ—Å–≤–µ–∂–∞—é—â–∏–µ –∫—É–ø–µ–ª–∏ –≤ –≥–æ—Ä–Ω–æ–π —Ä–µ–∫–µ
‚Ä¢ –ü–∞—Ä–∫ "–°–æ–ª–æ—Ö–æ—É–ª" ‚Äî –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –≤–∏–¥—ã –Ω–∞ —É—â–µ–ª—å–µ —Ä–µ–∫–∏ –®–∞—Ö–µ
‚Ä¢ –ó–∏–ø–ª–∞–π–Ω ‚Äî –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω –∏ –ø–æ–ª—ë—Ç –Ω–∞–¥ –∫–∞–Ω—å–æ–Ω–æ–º! 

üìç –ñ–ö —Å –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π ‚Äî –≤–∞—à –∫–æ–º—Ñ–æ—Ä—Ç –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ!

‚ú® –ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ ‚Äî –∏ –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ –≥–∞—Ä–º–æ–Ω–∏—é –º–æ—Ä—è, –≥–æ—Ä –∏ –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞!

üìç <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –ü—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–æ—Ç, –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É 10% –∏ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –æ—Ç –≤–æ–∫–∑–∞–ª–∞ –°–æ—á–∏!  
"""
    await message.answer(description)


@dp.message(lambda message: message.text == "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
async def show_calendar(message: types.Message):
    await message.answer(
        "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:\nhttps://sutochno.ru/front/searchapp/detail/1856903?guests_adults=1&occupied=2025-07-18%3B2025-07-19"
    )


@dp.message(lambda message: message.text == "üñ• –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def self_booking(message: types.Message):
    await message.answer(
        "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\nhttps://sutochno.ru/front/searchapp/detail/1856903?guests_adults=1&occupied=2025-07-18%3B2025-07-19"
    )


# ========== –ü–†–û–¶–ï–°–° –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø ==========
@dp.message(lambda message: message.text == "‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
async def start_booking(message: types.Message, state: FSMContext):
    await state.set_state(BookingStates.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(BookingStates.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(BookingStates.dates)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.07.24-10.07.24):")


@dp.message(BookingStates.dates)
async def process_dates(message: types.Message, state: FSMContext):
    await state.update_data(dates=message.text)
    await state.set_state(BookingStates.adults)
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö:")


@dp.message(BookingStates.adults)
async def process_adults(message: types.Message, state: FSMContext):
    await state.update_data(adults=message.text)
    await state.set_state(BookingStates.children)
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π (–µ—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ 0):")


@dp.message(BookingStates.children)
async def process_children(message: types.Message, state: FSMContext):
    await state.update_data(children=message.text)
    await state.set_state(BookingStates.pets)
    await message.answer("–ë—É–¥—É—Ç –ª–∏ —Å –≤–∞–º–∏ –∂–∏–≤–æ—Ç–Ω—ã–µ? (–¥–∞/–Ω–µ—Ç)")


@dp.message(BookingStates.pets)
async def process_pets(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        booking_info = (
            "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üìÖ –î–∞—Ç—ã: {data['dates']}\n"
            f"üë• –í–∑—Ä–æ—Å–ª—ã—Ö: {data['adults']}\n"
            f"üßí –î–µ—Ç–µ–π: {data['children']}\n"
            f"üêï –ñ–∏–≤–æ—Ç–Ω—ã–µ: {'–î–∞' if message.text.lower() in ['–¥–∞', 'yes'] else '–ù–µ—Ç'}\n"
            f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n"
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: @{message.from_user.username or '–Ω–µ—Ç username'}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
        contact_builder = InlineKeyboardBuilder()
        contact_builder.add(
            types.InlineKeyboardButton(
                text=f"üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å {data['name']}",
                url=f"tg://user?id={message.from_user.id}",
            )
        )

        await message.answer(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard(),
        )

        await bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=booking_info,
            reply_markup=contact_builder.as_markup(),
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(),
        )
    finally:
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", reply_markup=get_main_keyboard()
        )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("üîÑ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())
